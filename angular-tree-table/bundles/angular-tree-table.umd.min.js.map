{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://angular-tree-table/lib/angular-tree-table.service.ts","ng://angular-tree-table/classes/tree-table-row.ts","ng://angular-tree-table/classes/tree-table-data-config.ts","ng://angular-tree-table/classes/tree-table-data.ts","ng://angular-tree-table/classes/tt-data-type.ts","ng://angular-tree-table/classes/tree-table-row-action-type.ts","ng://angular-tree-table/lib/angular-tree-table.component.ts","ng://angular-tree-table/lib/angular-tree-table.module.ts","ng://angular-tree-table/classes/tree-table-header-object.ts","ng://angular-tree-table/classes/tree-table-row-action.ts"],"names":["__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","AngularTreeTableService","Injectable","args","providedIn","TreeTableRow","id","data","expandable","children","this","expanded","clickablesContext","clickables","styles","classes","actions","selected","options","TreeTableDataConfig","context","extraInfos","showTableHeaders","columnVisibility","columnVisibilityDropDown","visibleColumnFiltersVisibility","visibleColumnFilters","fullClassName","sortAscClassName","sortDescClassName","sortNothingClassName","customClassName","showExpandArrows","showExpandAllArrows","showExpandAllEmptyChildren","sortedColumn","showPageLengthDropdown","pageSizes","level","columnFilters","rowClickables","rowClickablesContext","commonSearch","excelExportButton","excelExportFileName","excelExportButtonText","excelExportAllChildren","excelExportOnlyExpanded","events","TreeTableDataEvents","shouldRowExpand","rowExpanded","shouldRowCollapse","rowCollapsed","TreeTableDataServerConfig","url","excelExportUrl","method","paramNames","TreeTableDataServerConfigParamMapping","rowsKey","totalRowsCountKey","filteredRowsCountKey","rowUniqueKey","page","limit","sort","search","colSearch","colFilters","pageToken","TreeTableData","config","serverConfig","http","headers","isLoading","keyword","pageSize","lastParams","totalRowsCount","filteredRowsCount","splashMessageFlag","splashMessageContent","tokens","isAllRowsExpanded","loadCounter","undefined","loadData","splice","p","prototype","totalPagesCount","pages","Math","ceil","getParams","params","JSON","stringify","colSearchKeys","Object","keys","colSearchKeys_1","tslib_1.__values","colSearchKeys_1_1","key","trim","loadExcelData","callback","dis","get","responseType","subscribe","resp","blob","Blob","type","saveAs","console","warn","_this","rows","_b","_c","rawRow","uniqueVal","Date","getTime","row","lastRawRow","err","allRowsExpanded","allRowsCollapsed","splashMessage","msg","setTimeout","NUMBER","TEXT","DATE","ACTIONS","SELECT","INPUT_TEXT","INPUT_SELECT","BUTTON","LINK","TOGGLE_CHILD","TOGGLE_SELECT","moment","moment_","AngularTreeTableComponent","differs","tableData","filteredData","className","randomInstance","dropdownHideListenerAdded","currentPageData","json","extraInfoItemWidthPercent","rowSelectionChanged","EventEmitter","inputRowSelectChanged","inputRowTextChanged","ngOnInit","validateData","setPageData","dataDiffers","find","create","columnFiltersDiffers","floor","random","redefineTableDataFunctions","filter","v","dataChanged","changes","refreshTable","ngDoCheck","diff","$","on","clickEvent","target","hasClass","expandRow","collapseRow","expandAllRows","expandAllRowsInData","data_1","data_1_1","collapseAllRows","collapseAllRowsInData","data_2","data_2_1","toggleRow","rowAction","action","TreeTableRowActionType","bind","changePage","pageNumber","rows_1","rows_1_1","parseInt","matched","keys_1","keys_1_1","toString","toLowerCase","indexOf","keys_2","keys_2_1","Array","isArray","orMatch","_e","e_6","_f","orFilter","keys_3","keys_3_1","rowsCount","startIndex","clickableClicked","dataProperty","columnSearchChanged","pageNumbers","unfilledCount","q","unshift","exportExcelLocal","dataRows","_d","d","obj","e_9","h","title","wb","Sheets","XLSX.utils","json_to_sheet","SheetNames","excelBuffer","XLSX.write","bookType","FileSaver.saveAs","sortColumn","header","propertyName","sortDescend","sortAscend","dataType","TtDataType","a","b","parseFloat","toDate","pageSizeChanged","excelExportClicked","getPageTo","to","isAllRowsSelected","toggleSelectAllRows","deselectAllRows","selectAllRows","map","updateHost","toggleSelectRow","getRowClass","expanded-row","collapsed-row","unselected","getSelectedRows","arguments","concat","__spread","childRowSelectionChanged","emit","inputRowSelectChangedInternal","event","rowData","headerKey","inputRowTextChangedInternal","inputRowSelectChangedChild","inputRowTextChangedChild","Component","selector","template","KeyValueDiffers","Input","Output","AngularTreeTableModule","NgModule","declarations","imports","FormsModule","CommonModule","exports","TreeTableHeaderObject","style","show","enableColumnSearch","TreeTableRowAction","label"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AngularTreeTableService {\r\n\r\n  constructor() { }\r\n}\r\n","import { TreeTableData } from './tree-table-data';\r\nimport { TreeTableRowAction } from './tree-table-row-action';\r\n\r\nexport class TreeTableRow {\r\n    id: string = null;\r\n    data: {} = {};\r\n    expandable = false;\r\n    children: TreeTableData = null;\r\n    expanded = false;\r\n    // Clickables Context for Actions\r\n    clickablesContext: any = null;\r\n    // Clickable Properties and Actions\r\n    clickables: {} = {};\r\n    styles: {} = {};\r\n    classes: string[] = [];\r\n    // Actions Header Buttons\r\n    actions: TreeTableRowAction[] = [];\r\n    // Is row selected\r\n    selected: boolean = false;\r\n    options: {value: string, displayText: string}[] =  [];\r\n\r\n    constructor(id: string, data: {}, expandable: boolean, children: TreeTableData) {\r\n        this.id = id;\r\n        this.data = data;\r\n        this.expandable = expandable;\r\n        this.children = children;\r\n    }\r\n}\r\n","export class TreeTableDataConfig {\n    /**\n     * Context should be Host component instance of tree table\n     * \n     * Default value is `null`\n     */\n    context? = null;\n    /**\n     * This is two dimensional array, each subarray should contain 2 or less strings, and there is no limit for subarrays count\n     * \n     * Default value is `[]`\n     */\n    extraInfos?:[][] = [];\n    /**\n     * This is used to show/ hide Table Headers\n     * \n     * Default value is `true` - Shows Table Headers\n     */\n    showTableHeaders? = true;\n    /**\n     * Column Visibility will show the group of buttons on top of table, which will allow us to toggle the visibility of each column\n     * \n     * Default value is `false` - hidden\n     */\n    columnVisibility? = false;\n    /**\n     * Same as Column Visibility but it shown as popover. It requires popper js library to work\n     * \n     * Default value is `false` - hidden\n     */\n    columnVisibilityDropDown? = false;\n    /**\n     * Enables seperate search field for each column under each table header\n     * \n     * Default value is `false` - Disabled\n     */\n    visibleColumnFiltersVisibility? = false;\n    /**\n     * This is used to set the search value by default based on `dataProperty`\n     * \n     * Ex: {country: 'India'}\n     * \n     * Default value is `{}`\n     */\n    visibleColumnFilters? = {};\n    /**\n     * Class name for table tag\n     * \n     * Default value is `stacktable table-bordered large-only table table-sm`\n     */\n    fullClassName? = 'stacktable table-bordered large-only table table-sm';\n    /**\n     * Class name for th tag which is sorted in `ascending` order\n     * \n     * Default value is `col-sort col-sort-asc`\n     */\n    sortAscClassName? = 'col-sort col-sort-asc';\n    /**\n     * Class name for th tag which is sorted in `descending` order\n     * \n     * Default value is `col-sort col-sort-desc`\n     */\n    sortDescClassName? = 'col-sort col-sort-desc';\n    /**\n     * Class name for th tag which is `not sorted`\n     * \n     * Default value is `col-sort col-sort-nothing`\n     */\n    sortNothingClassName? = 'col-sort col-sort-nothing';\n    /**\n     * Extra class name for table tag\n     * \n     * Default value is `null`\n     */\n    customClassName? = null;\n    /**\n     * This option will show the Expand Row Button on each row, if child exists\n     * \n     * Default value is `false`\n     */\n    showExpandArrows? = false;\n    /**\n     * This option will show the Expand Row Button on table header, which will expand/ collapse all rows with children at a time\n     * \n     * Default value is `false`\n     */\n    showExpandAllArrows? = false;\n    /**\n     * If this option is `true` then it will expand all the rows irrespective of child table has rows or not\n     * \n     * Default value is `false` - Only expand rows with child which has rows\n     */\n    showExpandAllEmptyChildren? = false;\n    /**\n     * This is used set the default sorted column and order based on dataProperty\n     * \n     * Ex: {firstName: 'asc'}\n     * \n     * Default value is `{}`\n     */\n    sortedColumn? = {};\n    /**\n     * This will shows the page length dropdown, which will used to render the no of rows on each page\n     * \n     * Default value is `true`\n     */\n    showPageLengthDropdown? = true;\n    /**\n     * This will used to customize page length dropdown options\n     * \n     * Default value is `[10, 25, 50, 100]`\n     */\n    pageSizes? = [10, 25, 50, 100];\n    /**\n     * This is for internal pupose of the `angular-tree-table`. Don't use it.\n     * \n     * Default value is `0`\n     */\n    level? = 0;\n    /**\n     * Column Filters are used to send the column wise search keywords to server. Don't use it. It will be used by `angular-tree-table` itself.\n     */\n    columnFilters? = {};\n    /**\n     * Row clickables are allows you to configure the row detail clicking actions with a callback method based on dataProperty\n     * \n     * Default value is `{}`\n     */\n    rowClickables? = {};\n    /**\n     * This should be instance of component or the instance of class where the callbacks of rowClickables implemented\n     * \n     * Default value is `null`\n     */\n    rowClickablesContext? = null;\n    /**\n     * This is used to show/ hide the common search box\n     * \n     * Default value is `true`\n     */\n    commonSearch? = true;\n    /**\n     * This is used to show/ hide Export Excel Button\n     * \n     * Default value is `false`\n     */\n    excelExportButton? = false;\n    /**\n     * This is used to configure the ExcelExport file name\n     * \n     * Default value is `ExportFile`\n     */\n    excelExportFileName? = 'ExportFile';\n    /**\n     * This is used to configure the Excel Export Button text\n     * \n     * Default value is `Excel Export`\n     */\n    excelExportButtonText? = 'Excel Export';\n    /**\n     * It is WIP, Which will be used to export to excel file along with all children of rows\n     * \n     * Default value is `true`\n     */\n    excelExportAllChildren? = true;\n    /**\n     * It is WIP, Which will be used to export to excel file along with all children of rows\n     * \n     * Default value is `true`\n     */\n    excelExportOnlyExpanded? = false;\n    /**\n     * It is WIP, which will used to configure the callbacks for events of the `angular-tree-table`\n     */\n    events?: TreeTableDataEvents = new TreeTableDataEvents();\n}\n\nexport class TreeTableDataEvents {\n    shouldRowExpand? = null;\n    rowExpanded? = null;\n    shouldRowCollapse? = null;\n    rowCollapsed? = null;\n}\n\nexport class TreeTableDataServerConfig {\n    /**\n     * `url` to invoke for the data from server\n     * \n     * Ex: `https://restapisample.com/entities`\n     * \n     * Default value is `null`\n     */\n    url = null;\n    /**\n     * `url` to invoke for the data from server as a file\n     * \n     * Ex: `https://restapisample.com/entities/export`\n     * \n     * Default value is `null`\n     */\n    excelExportUrl? = null;\n    /**\n     * HTTP Method for `url` and `excelExportUrl`\n     * \n     * Default value is `null`\n     */\n    method? = null;\n    /**\n     * `angular-tree-table` handles all the events, page change, next page, prev page, page length change through api call and using different parameter. These are used to customize those parameter keys as per the server side requirements\n     *\n     * Default values are `page, limit, sort, search, colSearch, colFilters, pageToken`\n     */\n    paramNames? = new TreeTableDataServerConfigParamMapping();\n    /**\n     * This is used to configure the property key of array in the api response\n     * \n     * Default value is `rows`\n     */\n    rowsKey? = 'rows';\n    /** \n     * This is used to configure the property key of totalRowsCount in the api response\n     * \n     * Default value is `totalRowsCount`\n     */\n    totalRowsCountKey? = 'totalRowsCount';\n    /**\n     * This is used to configure the property key of filteredRowsCount in the api response\n     * \n     * Default value is `filteredRowCount`\n     */\n    filteredRowsCountKey? = 'filteredRowsCount';\n    /**\n     * This is used to configure the unique key in the each row of the response\n     * \n     * Default value is `null`\n     */\n    rowUniqueKey? = null\n}\n\nexport class TreeTableDataServerConfigParamMapping {\n    /**\n     * Page number of the page will send under key configured here\n     * \n     * Default value is `page`\n     */\n    page? = 'page';\n    /**\n     * Limit of the page will send under key configured here\n     * \n     * Default value is `limit`\n     */\n    limit? = 'limit';\n    /**\n     * Sort of the table of each column will send under key configured here\n     * \n     * Default value is `sort`\n     */\n    sort? = 'sort';\n    /**\n     * Search keyword wil be send under key configured here\n     * \n     * Default value is `search`\n     */\n    search? = 'search';\n    /**\n     * Search keyword of each column will be send under key configured here\n     * \n     * Default value is `colSearch`\n     */\n    colSearch? = 'colSearch';\n    /**\n     * Filter of each column will be send under key configured here\n     * \n     * Default value is `colFilters`\n     */\n    colFilters? = 'colFilters';\n    /**\n     * Not using right now\n     * \n     * Default value is `pageToken`\n     */\n    pageToken? = 'pageToken';\n}","import { TreeTableHeaderObject } from './tree-table-header-object';\r\nimport { TreeTableRow } from './tree-table-row';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { saveAs } from 'file-saver';\r\nimport { TreeTableDataConfig, TreeTableDataServerConfig } from './tree-table-data-config';\r\n\r\nexport class TreeTableData {\r\n    headers: TreeTableHeaderObject[] = [];\r\n    data: TreeTableRow[] = [];\r\n\r\n    isLoading = false;\r\n    keyword: string = null;\r\n    page = 1;\r\n    pageSize = 10;\r\n    lastParams = null;\r\n    totalRowsCount = 0;\r\n    filteredRowsCount = 0;\r\n    splashMessageFlag = false;\r\n    splashMessageContent = '';\r\n    tokens = [null];\r\n    isAllRowsExpanded = false;\r\n\r\n    serverConfig = new TreeTableDataServerConfig();\r\n    config = new TreeTableDataConfig();\r\n    loadCounter = 0;\r\n\r\n    private http: HttpClient = null;\r\n\r\n    constructor(config?: TreeTableDataConfig, serverConfig?: TreeTableDataServerConfig, http?: HttpClient) {\r\n        this.http = http;\r\n        if (serverConfig !== undefined && serverConfig !== null) {\r\n            if (serverConfig.paramNames === undefined || serverConfig.paramNames === null) {\r\n                serverConfig.paramNames = this.serverConfig.paramNames;\r\n            }\r\n            if (serverConfig.rowsKey === undefined || serverConfig.rowsKey === null) {\r\n                serverConfig.rowsKey = this.serverConfig.rowsKey;\r\n            }\r\n            if (serverConfig.rowUniqueKey === undefined || serverConfig.rowUniqueKey === null) {\r\n                serverConfig.rowUniqueKey = this.serverConfig.rowUniqueKey;\r\n            }\r\n            this.serverConfig = serverConfig;\r\n            this.loadData();\r\n        } else {\r\n            // console.log('No Server Properties');\r\n        }\r\n        if (config !== undefined && config !== null) {\r\n            if (config.extraInfos !== undefined && config.extraInfos !== null) {\r\n                this.config.extraInfos = config.extraInfos;\r\n            }\r\n            if (config.context !== undefined && config.context !== null) {\r\n                this.config.context = config.context;\r\n            }\r\n            if (config.showTableHeaders !== undefined && config.showTableHeaders !== null) {\r\n                this.config.showTableHeaders = config.showTableHeaders;\r\n            }\r\n            if (config.showExpandArrows !== undefined && config.showExpandArrows !== null) {\r\n                this.config.showExpandArrows = config.showExpandArrows;\r\n            }\r\n            if (config.events === undefined || config.events === null) {\r\n                config.events = this.config.events;\r\n            } else {\r\n                if (config.events.rowExpanded !== undefined\r\n                    && config.events.rowExpanded !== null) {\r\n                    this.config.events.rowExpanded = config.events.rowExpanded;\r\n                }\r\n                if (config.events.rowCollapsed !== undefined\r\n                    && config.events.rowCollapsed !== null) {\r\n                    this.config.events.rowCollapsed = config.events.rowCollapsed;\r\n                }\r\n            }\r\n            if (config.fullClassName !== undefined && config.fullClassName !== null) {\r\n                this.config.fullClassName = config.fullClassName;\r\n            }\r\n            if (config.excelExportFileName !== undefined && config.excelExportFileName !== null) {\r\n                this.config.excelExportFileName = config.excelExportFileName;\r\n            }\r\n            if (config.excelExportButtonText !== undefined && config.excelExportButtonText !== null) {\r\n                this.config.excelExportButtonText = config.excelExportButtonText;\r\n            }\r\n            if (config.sortAscClassName !== undefined && config.sortAscClassName !== null) {\r\n                this.config.sortAscClassName = config.sortAscClassName;\r\n            }\r\n            if (config.sortDescClassName !== undefined && config.sortDescClassName !== null) {\r\n                this.config.sortDescClassName = config.sortDescClassName;\r\n            }\r\n            if (config.sortNothingClassName !== undefined && config.sortNothingClassName !== null) {\r\n                this.config.sortNothingClassName = config.sortNothingClassName;\r\n            }\r\n            if (config.customClassName !== undefined && config.customClassName !== null) {\r\n                this.config.customClassName = config.customClassName;\r\n            }\r\n            if (config.showExpandAllArrows !== undefined && config.showExpandAllArrows !== null) {\r\n                this.config.showExpandAllArrows = config.showExpandAllArrows;\r\n            }\r\n            if (config.showExpandAllEmptyChildren !== undefined && config.showExpandAllEmptyChildren !== null) {\r\n                this.config.showExpandAllEmptyChildren = config.showExpandAllEmptyChildren;\r\n            }\r\n            if (config.showPageLengthDropdown !== undefined && config.showPageLengthDropdown !== null) {\r\n                this.config.showPageLengthDropdown = config.showPageLengthDropdown;\r\n            }\r\n            if (config.columnVisibility !== undefined && config.columnVisibility !== null) {\r\n                this.config.columnVisibility = config.columnVisibility;\r\n            }\r\n            if (config.columnVisibilityDropDown !== undefined && config.columnVisibilityDropDown !== null) {\r\n                this.config.columnVisibilityDropDown = config.columnVisibilityDropDown;\r\n            }\r\n            if (config.visibleColumnFiltersVisibility !== undefined && config.visibleColumnFiltersVisibility !== null) {\r\n                this.config.visibleColumnFiltersVisibility = config.visibleColumnFiltersVisibility;\r\n            }\r\n            if (config.sortedColumn !== undefined && config.sortedColumn !== null) {\r\n                this.config.sortedColumn = config.sortedColumn;\r\n            }\r\n            if (config.level !== undefined && config.level !== null) {\r\n                this.config.level = config.level;\r\n            }\r\n            if (config.commonSearch !== undefined && config.commonSearch !== null) {\r\n                this.config.commonSearch = config.commonSearch;\r\n            }\r\n            if (config.columnFilters !== undefined && config.columnFilters !== null) {\r\n                this.config.columnFilters = config.columnFilters;\r\n            }\r\n            if (config.pageSizes !== undefined && config.pageSizes !== null && config.pageSizes.length > 0) {\r\n                this.config.pageSizes.splice(0, this.config.pageSizes.length);\r\n                for (let p = 0; p < config.pageSizes.length; p++) {\r\n                    if (config.pageSizes[p] > 0) {\r\n                        this.config.pageSizes.push(config.pageSizes[p]);\r\n                    }\r\n                }\r\n                // this.config.pageSizes = config.pageSizes;\r\n            }\r\n            if (config.visibleColumnFilters !== undefined && config.visibleColumnFilters !== null) {\r\n                this.config.visibleColumnFilters = config.visibleColumnFilters;\r\n            }\r\n            if (config.rowClickablesContext !== undefined && config.rowClickablesContext !== null) {\r\n                this.config.rowClickablesContext = config.rowClickablesContext;\r\n            }\r\n            if (config.rowClickables !== undefined && config.rowClickables !== null) {\r\n                this.config.rowClickables = config.rowClickables;\r\n            }\r\n            if (config.commonSearch !== undefined && config.commonSearch !== null) {\r\n                this.config.commonSearch = config.commonSearch;\r\n            }\r\n            if (config.excelExportButton !== undefined && config.excelExportButton !== null) {\r\n                this.config.excelExportButton = config.excelExportButton;\r\n            }\r\n        } else {\r\n            // console.log('No Properties');\r\n        }\r\n        // console.log('Properties', config);\r\n    }\r\n\r\n    totalPagesCount() {\r\n        const pages = this.filteredRowsCount / this.pageSize;\r\n        return Math.ceil(pages);\r\n    }\r\n\r\n    getParams() {\r\n        const params = {};\r\n        if (this.page - 1 >= 0) {\r\n            if (this.tokens[this.page - 1] !== undefined && this.tokens[this.page - 1] !== null) {\r\n                params[this.serverConfig.paramNames.pageToken] = this.tokens[this.page - 1];\r\n            }\r\n        }\r\n        params[this.serverConfig.paramNames.page] = this.page;\r\n        params[this.serverConfig.paramNames.search] = this.keyword;\r\n        params[this.serverConfig.paramNames.limit] = this.pageSize;\r\n        params[this.serverConfig.paramNames.colFilters] = JSON.stringify(this.config.columnFilters);\r\n        params[this.serverConfig.paramNames.sort] = JSON.stringify(this.config.sortedColumn);\r\n        const colSearchKeys = Object.keys(this.config.visibleColumnFilters);\r\n        for (let key of colSearchKeys) {\r\n            if (this.config.visibleColumnFilters[key] === null) {\r\n                delete this.config.visibleColumnFilters[key];\r\n            }\r\n            if (this.config.visibleColumnFilters[key] === undefined) {\r\n                delete this.config.visibleColumnFilters[key];\r\n            }\r\n            if (this.config.visibleColumnFilters[key] === '') {\r\n                delete this.config.visibleColumnFilters[key];\r\n            }\r\n            if (this.config.visibleColumnFilters[key].trim() === '') {\r\n                delete this.config.visibleColumnFilters[key];\r\n            }\r\n        }\r\n        params[this.serverConfig.paramNames.colSearch] = JSON.stringify(this.config.visibleColumnFilters);\r\n        return params;\r\n    }\r\n\r\n    loadExcelData(callback?: any) {\r\n        if (this.serverConfig.excelExportUrl === null) {\r\n            console.warn('ExcelExportUrl not specified');\r\n            return;\r\n        }\r\n        const params = this.getParams();\r\n        // delete params[this.serverConfig.paramNames.limit];\r\n        const dis = this;\r\n        dis.isLoading = true;\r\n        if (this.serverConfig.method === 'GET') {\r\n            this.http.get(this.serverConfig.excelExportUrl, { params, responseType: 'blob' }).subscribe(resp => {\r\n                dis.isLoading = false;\r\n                const blob = new Blob([resp], {type: 'application/vnd.ms-excel'} );\r\n                saveAs(blob, 'Orders.xlsx');\r\n            });\r\n        }\r\n    }\r\n\r\n    loadData(callback?: any) {\r\n        if (this.serverConfig.url === null) {\r\n            console.warn('URL not specified');\r\n            return;\r\n        }\r\n        const params = this.getParams();\r\n        if (this.lastParams !== undefined && this.lastParams !== null) {\r\n            if (this.lastParams === JSON.stringify(params)) {\r\n                return;\r\n            }\r\n        }\r\n        this.lastParams = JSON.stringify(params);\r\n        const dis = this;\r\n        dis.isLoading = true;\r\n        dis.loadCounter++;\r\n        if (this.serverConfig.method === 'GET') {\r\n            this.http.get(this.serverConfig.url, { params }).subscribe(resp => {\r\n                if (callback !== undefined && callback !== null) {\r\n                    const rows = [];\r\n                    if (resp[this.serverConfig.rowsKey] === undefined || resp[this.serverConfig.rowsKey] === null) {\r\n                        callback([]);\r\n                        dis.loadCounter--;\r\n                        if (dis.loadCounter <= 0) {\r\n                            dis.isLoading = false;\r\n                            dis.loadCounter = 0;\r\n                        }\r\n                    } else {\r\n                        this.totalRowsCount = resp[this.serverConfig.totalRowsCountKey];\r\n                        this.filteredRowsCount = resp[this.serverConfig.filteredRowsCountKey];\r\n                        for (const rawRow of resp[this.serverConfig.rowsKey]) {\r\n                            let uniqueVal = null;\r\n                            if (this.serverConfig.rowUniqueKey === undefined || this.serverConfig.rowUniqueKey === null) {\r\n                                uniqueVal = new Date().getTime();\r\n                            } else {\r\n                                uniqueVal = rawRow[this.serverConfig.rowUniqueKey];\r\n                            }\r\n                            const row = new TreeTableRow(uniqueVal, rawRow, false, undefined);\r\n                            row.clickablesContext = this.config.rowClickablesContext;\r\n                            row.clickables = this.config.rowClickables;\r\n                            rows.push(row);\r\n                        }\r\n                        const lastRawRow = resp[this.serverConfig.rowsKey][resp[this.serverConfig.rowsKey].length - 1];\r\n                        if (lastRawRow !== undefined && lastRawRow !== null) {\r\n                            if (this.serverConfig.rowUniqueKey !== undefined && this.serverConfig.rowUniqueKey !== null) {\r\n                                this.tokens[this.page] = lastRawRow[this.serverConfig.rowUniqueKey];\r\n                            }\r\n                        }\r\n                        callback(rows);\r\n                        dis.loadCounter--;\r\n                        if (dis.loadCounter <= 0) {\r\n                            dis.isLoading = false;\r\n                            dis.loadCounter = 0;\r\n                        }\r\n                    }\r\n                } else {\r\n                    dis.loadCounter--;\r\n                    if (dis.loadCounter <= 0) {\r\n                        dis.isLoading = false;\r\n                        dis.loadCounter = 0;\r\n                    }\r\n                }\r\n            }, err => {\r\n                dis.loadCounter--;\r\n                if (dis.loadCounter <= 0) {\r\n                    dis.isLoading = false;\r\n                    dis.loadCounter = 0;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    allRowsExpanded(): boolean {\r\n        return false;\r\n    }\r\n\r\n    allRowsCollapsed(): boolean {\r\n        return false;\r\n    }\r\n\r\n    splashMessage(msg: string) {\r\n        this.splashMessageContent = msg;\r\n        this.splashMessageFlag = true;\r\n        const dis = this;\r\n        setTimeout(() => {\r\n            dis.splashMessageFlag  = false;\r\n        }, 2000);\r\n    }\r\n}\r\n","export enum TtDataType {\r\n    NUMBER = 'NUMBER',\r\n    TEXT = 'TEXT',\r\n    DATE = 'DATE',\r\n    ACTIONS = 'ACTIONS',\r\n    SELECT = 'SELECT',\r\n    INPUT_TEXT = 'INPUT_TEXT',\r\n    INPUT_SELECT = 'INPUT_SELECT'\r\n}\r\n","export enum TreeTableRowActionType {\r\n    BUTTON, LINK, TOGGLE_CHILD, TOGGLE_SELECT\r\n}\r\n","import { Component, OnInit, KeyValueDiffer, Input, KeyValueDiffers,\r\n         KeyValueChanges, AfterContentInit, Output, EventEmitter, DoCheck } from '@angular/core';\r\nimport * as moment_ from 'moment';\r\nimport { TreeTableData } from '../classes/tree-table-data';\r\nimport { TreeTableRow } from '../classes/tree-table-row';\r\nimport { TreeTableRowAction } from '../classes/tree-table-row-action';\r\nimport { TreeTableHeaderObject } from '../classes/tree-table-header-object';\r\nimport { TtDataType } from '../classes/tt-data-type';\r\nimport * as XLSX from 'xlsx';\r\nimport * as FileSaver from 'file-saver';\r\nimport { TreeTableRowActionType } from '../classes/tree-table-row-action-type';\r\n\r\ndeclare var $: any;\r\n\r\nconst moment = moment_;\r\n\r\n@Component({\r\n  selector: 'angular-tree-table',\r\n  templateUrl: './angular-tree-table.component.html',\r\n  styleUrls: ['./angular-tree-table.component.scss']\r\n})\r\nexport class AngularTreeTableComponent implements OnInit, DoCheck {\r\n\r\n  private dataDiffers: KeyValueDiffer<string, any>;\r\n  @Input() tableData = new TreeTableData();\r\n  filteredData: TreeTableRow[] = [];\r\n  className = '';\r\n  randomInstance = null;\r\n  dropdownHideListenerAdded = false;\r\n  currentPageData = new TreeTableData();\r\n  private columnFiltersDiffers: KeyValueDiffer<string, any>;\r\n  json = null;\r\n  extraInfoItemWidthPercent = 100;\r\n  @Output() rowSelectionChanged = new EventEmitter<any[]>();\r\n  @Output() inputRowSelectChanged = new EventEmitter<{ event: any, rowData: any, headerKey: string, value: any, level: number }>();\r\n  @Output() inputRowTextChanged = new EventEmitter<{ event: any, rowData: any, headerKey: string, value: any, level: number }>();\r\n\r\n  constructor(private differs: KeyValueDiffers) {\r\n    this.json = JSON;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.validateData();\r\n    this.setPageData(this.tableData.page);\r\n    this.className = 'table-tree level' + this.tableData.config.level;\r\n    if (this.tableData.config.level === 0) {\r\n      console.warn('Initialize Search Functionality');\r\n    }\r\n    this.dataDiffers = this.differs.find(this.tableData).create();\r\n    this.columnFiltersDiffers = this.differs.find(this.tableData.config.columnFilters).create();\r\n    this.randomInstance = Math.floor(Math.random() * Math.floor(9999));\r\n    this.extraInfoItemWidthPercent = 100 / this.tableData.config.extraInfos.length;\r\n\r\n    this.redefineTableDataFunctions();\r\n  }\r\n\r\n  redefineTableDataFunctions() {\r\n    const dis = this;\r\n    this.tableData.allRowsCollapsed = (): boolean => {\r\n      return dis.currentPageData.data.length === dis.currentPageData.data.filter(v => !v.expanded).length;\r\n    };\r\n\r\n    this.tableData.allRowsExpanded = (): boolean => {\r\n      return dis.currentPageData.data.length === dis.currentPageData.data.filter(v => v.expanded).length;\r\n    };\r\n  }\r\n\r\n  dataChanged(changes: KeyValueChanges<string, any>) {\r\n    this.redefineTableDataFunctions();\r\n    this.setPageData(this.tableData.page);\r\n  }\r\n\r\n  refreshTable() {\r\n    this.setPageData(this.tableData.page);\r\n  }\r\n\r\n  ngDoCheck(): void {\r\n    let changes = this.dataDiffers.diff(this.tableData);\r\n    if (changes) {\r\n      this.dataChanged(changes);\r\n    }\r\n    changes = this.columnFiltersDiffers.diff(this.tableData.config.columnFilters);\r\n    if (changes) {\r\n      this.dataChanged(changes);\r\n    }\r\n    if (!this.dropdownHideListenerAdded) {\r\n      $('#dropDownVisCon' + this.randomInstance).on('hide.bs.dropdown', function (e) {\r\n        if (e.clickEvent !== undefined) {\r\n          if ($(e.clickEvent.target).hasClass('btnVis')) {\r\n            return false;\r\n          }\r\n        }\r\n        this.dropdownHideListenerAdded = true;\r\n        return true;\r\n      });\r\n    }\r\n  }\r\n\r\n  expandRow(row: TreeTableRow) {\r\n    row.expanded = true;\r\n    if (this.tableData.config.events.rowExpanded !== null) {\r\n      this.tableData.config.events.rowExpanded(row, this.tableData);\r\n    }\r\n  }\r\n\r\n  collapseRow(row: TreeTableRow) {\r\n    row.expanded = false;\r\n    this.tableData.isAllRowsExpanded = false;\r\n    if (this.tableData.config.events.rowCollapsed !== null) {\r\n      this.tableData.config.events.rowCollapsed(row, this.tableData);\r\n    }\r\n  }\r\n\r\n  expandAllRows() {\r\n    this.expandAllRowsInData(this.currentPageData.data);\r\n    this.tableData.isAllRowsExpanded = true;\r\n  }\r\n\r\n  expandAllRowsInData(data: TreeTableRow[]) {\r\n    for (const row of data) {\r\n      if (row.expandable) {\r\n        if (row.children !== null) {\r\n          if (row.children.data !== null) {\r\n            if (this.tableData.config.showExpandAllEmptyChildren) {\r\n              // row.expanded = true;\r\n              this.expandRow(row);\r\n              this.expandAllRowsInData(row.children.data);\r\n              row.children.isAllRowsExpanded = true;\r\n            } else {\r\n              if (row.children.data.length > 0) {\r\n                // row.expanded = true;\r\n                this.expandRow(row);\r\n                this.expandAllRowsInData(row.children.data);\r\n                row.children.isAllRowsExpanded = true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  collapseAllRows() {\r\n    this.collapseAllRowsInData(this.currentPageData.data);\r\n    this.tableData.isAllRowsExpanded = false;\r\n  }\r\n\r\n  collapseAllRowsInData(data: TreeTableRow[]) {\r\n    for (const row of data) {\r\n      if (row.expandable) {\r\n        if (row.children !== null) {\r\n          if (row.children.data !== null) {\r\n            if (this.tableData.config.showExpandAllEmptyChildren) {\r\n              // row.expanded = false;\r\n              this.collapseRow(row);\r\n              this.collapseAllRowsInData(row.children.data);\r\n              row.children.isAllRowsExpanded = false;\r\n            } else {\r\n              if (row.children.data.length > 0) {\r\n                // row.expanded = false;\r\n                this.collapseRow(row);\r\n                this.collapseAllRowsInData(row.children.data);\r\n                row.children.isAllRowsExpanded = false;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  toggleRow(row: TreeTableRow) {\r\n    row.expanded ? this.collapseRow(row) : this.expandRow(row);\r\n  }\r\n\r\n  rowAction(row: TreeTableRow, action: TreeTableRowAction) {\r\n    if (action.type === TreeTableRowActionType.TOGGLE_CHILD) {\r\n      this.toggleRow(row);\r\n    }\r\n    if (action.action !== undefined && action.action !== null) {\r\n      action.action.bind(action.context, row.data, action)();\r\n    }\r\n  }\r\n\r\n  changePage(page: number) {\r\n    if (this.tableData.page === page || page < 1) {\r\n      return;\r\n    }\r\n    if (page > this.tableData.totalPagesCount()) {\r\n      return;\r\n    }\r\n    // if (this.currentPageData.data.length < this.tableData.pageSize && this.tableData.page < page) {\r\n    //   this.tableData.splashMessage('Reached last page');\r\n    //   return;\r\n    // }\r\n    this.setPageData(page);\r\n    this.collapseAllRows();\r\n  }\r\n\r\n  setPageData(pageNumber: number) {\r\n    this.extraInfoItemWidthPercent = 100 / this.tableData.config.extraInfos.length;\r\n    const dis = this;\r\n    if (this.tableData.serverConfig.url !== undefined && this.tableData.serverConfig.url !== null) {\r\n      if (pageNumber !== 1) {\r\n        if ((pageNumber - 1) * this.tableData.pageSize > this.tableData.totalRowsCount) {\r\n          console.warn('Invalid Page', (pageNumber - 1) * this.tableData.pageSize, this.tableData.totalRowsCount);\r\n          return;\r\n        }\r\n      }\r\n      this.tableData.page = pageNumber;\r\n      this.tableData.loadData(rows => {\r\n        // if (rows.length === 0) {\r\n        //   dis.changePage(dis.tableData.page - 1);\r\n        //   dis.tableData.splashMessage('Reached last page');\r\n        //   console.warn('No data on the next page');\r\n        //   // return;\r\n        // }\r\n        dis.filteredData.splice(0, this.filteredData.length);\r\n        for (const row of rows) {\r\n          dis.filteredData.push(row);\r\n        }\r\n        const rowsCount = dis.filteredData.length;\r\n        // dis.tableData.pagesCount = Math.floor(rowsCount / this.tableData.pageSize);\r\n        // if (dis.tableData.pageSize * dis.tableData.pagesCount < rowsCount) {\r\n        //   dis.tableData.pagesCount++;\r\n        // }\r\n        dis.currentPageData.headers = dis.tableData.headers;\r\n        const startIndex = (pageNumber - 1) * this.tableData.pageSize;\r\n        if (this.currentPageData.data === undefined) {\r\n          this.currentPageData.data = [];\r\n        }\r\n        this.currentPageData.data.splice(0, this.currentPageData.data.length);\r\n        for (let i = 0; i < parseInt(this.tableData.pageSize + '', 10); i++) {\r\n          // console.log('Adding Vvalue', this.filteredData[i], i);\r\n          if (this.filteredData[i] !== null && this.filteredData[i] !== undefined) {\r\n            this.currentPageData.data.push(this.filteredData[i]);\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      dis.tableData.totalRowsCount = dis.tableData.data.length;\r\n      if (pageNumber !== 1) {\r\n        if ((pageNumber - 1) * this.tableData.pageSize > this.tableData.totalRowsCount) {\r\n          console.warn('Invalid Page', (pageNumber - 1) * this.tableData.pageSize, this.tableData.totalRowsCount);\r\n          return;\r\n        }\r\n      }\r\n      this.tableData.page = pageNumber;\r\n      this.filteredData.splice(0, this.filteredData.length);\r\n      this.filteredData = this.tableData.data.filter((v) => {\r\n        const keys = Object.keys(v.data);\r\n        let matched = false;\r\n        if (this.tableData.keyword !== undefined && this.tableData.keyword !== null && this.tableData.keyword.trim() !== '') {\r\n          for (const key of keys) {\r\n            if (v.data[key] === undefined || v.data[key] === null) {\r\n              continue;\r\n            }\r\n            matched = v.data[key].toString().toLowerCase().indexOf(this.tableData.keyword.toLowerCase()) > -1;\r\n            if (matched) {\r\n              break;\r\n            }\r\n          }\r\n        } else {\r\n          matched = true;\r\n        }\r\n        if (matched && this.tableData.config.columnFilters !== undefined && this.tableData.config.columnFilters !== null) {\r\n          for (const key of keys) {\r\n            if (this.tableData.config.columnFilters[key] !== undefined &&\r\n              this.tableData.config.columnFilters[key] !== null &&\r\n              Array.isArray(this.tableData.config.columnFilters[key])) {\r\n              if (v.data[key] === undefined || v.data[key] === null) {\r\n                matched = false;\r\n                break;\r\n              }\r\n              let orMatch = false;\r\n              for (const orFilter of this.tableData.config.columnFilters[key]) {\r\n                orMatch = v.data[key].toString().toLowerCase().indexOf(orFilter.toLowerCase()) > -1;\r\n                if (orMatch) {\r\n                  break;\r\n                }\r\n              }\r\n              matched = orMatch;\r\n              if (!matched) {\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        if (matched && this.tableData.config.visibleColumnFilters !== undefined && this.tableData.config.visibleColumnFilters !== null) {\r\n          for (const key of keys) {\r\n            if (this.tableData.config.visibleColumnFilters[key] !== undefined &&\r\n              this.tableData.config.visibleColumnFilters[key] !== null &&\r\n              this.tableData.config.visibleColumnFilters[key].trim() !== '') {\r\n              if (v.data[key] === undefined || v.data[key] === null) {\r\n                matched = false;\r\n                break;\r\n              }\r\n              matched = v.data[key].toString().toLowerCase().indexOf(this.tableData.config.visibleColumnFilters[key].toLowerCase()) > -1;\r\n              if (!matched) {\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        return matched;\r\n      });\r\n      const rowsCount = dis.filteredData.length;\r\n      dis.tableData.filteredRowsCount = rowsCount;\r\n      // dis.tableData.pagesCount = Math.floor(rowsCount / this.tableData.pageSize);\r\n      // if (dis.tableData.pageSize * dis.tableData.pagesCount < rowsCount) {\r\n      //   dis.tableData.pagesCount++;\r\n      // }\r\n      dis.currentPageData.headers = dis.tableData.headers;\r\n      const startIndex = (pageNumber - 1) * this.tableData.pageSize;\r\n      if (this.currentPageData.data === undefined) {\r\n        this.currentPageData.data = [];\r\n      }\r\n      this.currentPageData.data.splice(0, this.currentPageData.data.length);\r\n      for (let i = startIndex; i < parseInt(startIndex + '', 10) + parseInt(this.tableData.pageSize + '', 10); i++) {\r\n        if (this.filteredData[i] !== null && this.filteredData[i] !== undefined) {\r\n          this.currentPageData.data.push(this.filteredData[i]);\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  clickableClicked(row: TreeTableRow, dataProperty: string) {\r\n    if (typeof row.clickables[dataProperty] === 'string') {\r\n      if (row.clickables[dataProperty] === TreeTableRowActionType.TOGGLE_CHILD.toString()) {\r\n        this.toggleRow(row);\r\n        return;\r\n      }\r\n    }\r\n    if (row.clickablesContext !== null) {\r\n      row.clickables[dataProperty].bind(row.clickablesContext, row.data, dataProperty)();\r\n    } else {\r\n      row.clickables[dataProperty](row.data, dataProperty);\r\n    }\r\n  }\r\n\r\n  validateData() {\r\n    console.warn('Data Schema need to be validated');\r\n  }\r\n\r\n  columnSearchChanged(dataProperty: string) {\r\n    this.setPageData(1);\r\n  }\r\n\r\n  pageNumbers() {\r\n    const pageNumbers = [];\r\n    const limit = 2;\r\n    const maxLimit = 4;\r\n    for (let p = this.tableData.page - limit; p < this.tableData.page; p++) {\r\n      if (p > 0) {\r\n        pageNumbers.push(p);\r\n      }\r\n    }\r\n    const unfilledCount = limit - pageNumbers.length;\r\n    for (let q = this.tableData.page; q <= this.tableData.page + unfilledCount + limit; q++) {\r\n      if (q <= this.tableData.totalPagesCount()) {\r\n        pageNumbers.push(q);\r\n      }\r\n    }\r\n    if (pageNumbers.length < maxLimit) {\r\n      for (let p = this.tableData.page - limit * 2; p < this.tableData.page - limit; p++) {\r\n        if (p > 0) {\r\n          pageNumbers.unshift(p);\r\n        }\r\n      }\r\n    }\r\n    return pageNumbers;\r\n  }\r\n\r\n  exportExcelLocal() {\r\n    const dataRows = [];\r\n    for (let d of this.tableData.data) {\r\n      const obj = {};\r\n      for (let h of this.tableData.headers) {\r\n        obj[h.title] = d.data[h.dataProperty];\r\n      }\r\n      dataRows.push(obj);\r\n    }\r\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    const fileExtension = '.xlsx';\r\n    const ws: XLSX.WorkSheet = XLSX.utils.json_to_sheet(dataRows);\r\n    const wb: XLSX.WorkBook = { Sheets: { data: ws }, SheetNames: ['data'] };\r\n    const excelBuffer: any = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n    const data: Blob = new Blob([excelBuffer], { type: fileType });\r\n    FileSaver.saveAs(data, this.tableData.config.excelExportFileName + fileExtension);\r\n  }\r\n\r\n  sortColumn(header: TreeTableHeaderObject) {\r\n    const propertyName = header.dataProperty;\r\n    if (this.tableData.config.sortedColumn[propertyName] === undefined) {\r\n      this.tableData.config.sortedColumn = {};\r\n      this.tableData.config.sortedColumn[propertyName] = 'DESC';\r\n      this.sortDescend(header);\r\n    } else if (this.tableData.config.sortedColumn[propertyName] === 'DESC') {\r\n      this.tableData.config.sortedColumn[propertyName] = 'ASC';\r\n      this.sortAscend(header);\r\n    } else {\r\n      delete this.tableData.config.sortedColumn[propertyName];\r\n    }\r\n  }\r\n\r\n  sortAscend(header: TreeTableHeaderObject) {\r\n    const propertyName = header.dataProperty;\r\n    if (header.dataType === TtDataType.NUMBER) {\r\n      this.tableData.data.sort((a, b) => {\r\n        if (parseFloat(a.data[propertyName]) < parseFloat(b.data[propertyName])) {\r\n          return -1;\r\n        } else if (parseFloat(a.data[propertyName]) > parseFloat(b.data[propertyName])) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      });\r\n    } else if (header.dataType === TtDataType.DATE) {\r\n      this.tableData.data.sort((a, b) => {\r\n        if (moment(a.data[propertyName]).toDate().getTime() < moment(b.data[propertyName]).toDate().getTime()) {\r\n          return -1;\r\n        } else if (moment(a.data[propertyName]).toDate().getTime() > moment(b.data[propertyName]).toDate().getTime()) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      });\r\n    } else {\r\n      this.tableData.data.sort((a, b) => {\r\n        if (a.data[propertyName] < b.data[propertyName]) {\r\n          return -1;\r\n        } else if (a.data[propertyName] > b.data[propertyName]) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      });\r\n    }\r\n    this.setPageData(this.tableData.page);\r\n  }\r\n\r\n  sortDescend(header: TreeTableHeaderObject) {\r\n    const propertyName = header.dataProperty;\r\n    if (header.dataType === TtDataType.NUMBER) {\r\n      this.tableData.data.sort((a, b) => {\r\n        if (parseFloat(a.data[propertyName]) < parseFloat(b.data[propertyName])) {\r\n          return 1;\r\n        } else if (parseFloat(a.data[propertyName]) > parseFloat(b.data[propertyName])) {\r\n          return -1;\r\n        }\r\n        return 0;\r\n      });\r\n    } else if (header.dataType === TtDataType.DATE) {\r\n      this.tableData.data.sort((a, b) => {\r\n        if (moment(a.data[propertyName]).toDate().getTime() < moment(b.data[propertyName]).toDate().getTime()) {\r\n          return 1;\r\n        } else if (moment(a.data[propertyName]).toDate().getTime() > moment(b.data[propertyName]).toDate().getTime()) {\r\n          return -1;\r\n        }\r\n        return 0;\r\n      });\r\n    } else {\r\n      this.tableData.data.sort((a, b) => {\r\n        if (a.data[propertyName] < b.data[propertyName]) {\r\n          return 1;\r\n        } else if (a.data[propertyName] > b.data[propertyName]) {\r\n          return -1;\r\n        }\r\n        return 0;\r\n      });\r\n    }\r\n    this.setPageData(this.tableData.page);\r\n  }\r\n\r\n  search() {\r\n    this.setPageData(1);\r\n  }\r\n\r\n  pageSizeChanged() {\r\n    this.setPageData(1);\r\n  }\r\n\r\n  excelExportClicked() {\r\n    if (this.tableData.serverConfig !== undefined && this.tableData.serverConfig !== null && this.tableData.serverConfig.excelExportUrl !== undefined && this.tableData.serverConfig.excelExportUrl !== null) {\r\n      this.tableData.loadExcelData();\r\n    } else {\r\n      this.exportExcelLocal();\r\n    }\r\n  }\r\n\r\n  getPageTo() {\r\n    let to = this.tableData.pageSize * this.tableData.page;\r\n    if (to > this.tableData.filteredRowsCount) {\r\n      to = this.tableData.filteredRowsCount;\r\n    }\r\n    return to;\r\n  }\r\n\r\n  isAllRowsSelected(header: TreeTableHeaderObject): boolean {\r\n    return this.tableData.data.filter(v => v.selected).length === this.tableData.data.length;\r\n  }\r\n\r\n  toggleSelectAllRows(header: TreeTableHeaderObject) {\r\n    this.isAllRowsSelected(header) ? this.deselectAllRows(header) : this.selectAllRows(header);\r\n  }\r\n\r\n  private selectAllRows(header: TreeTableHeaderObject) {\r\n    this.tableData.data = this.tableData.data.map(v => { v.selected = true; return v; });\r\n    this.updateHost();\r\n  }\r\n\r\n  private deselectAllRows(header: TreeTableHeaderObject) {\r\n    this.tableData.data = this.tableData.data.map(v => { v.selected = false; return v; });\r\n    this.updateHost();\r\n  }\r\n\r\n  toggleSelectRow(row: TreeTableRow) {\r\n    row.selected = !row.selected;\r\n    this.updateHost();\r\n  }\r\n\r\n  getRowClass(row: TreeTableRow) {\r\n    let classes = { 'expanded-row': row.expanded, 'collapsed-row': !row.expanded, 'selected': 'row.selected', 'unselected': '!row.selected' };\r\n    for (const cls of row.classes) {\r\n      classes[cls] = true;\r\n    }\r\n    return classes;\r\n  }\r\n\r\n  getSelectedRows() {\r\n    const rows = [...this.tableData.data.filter(v => {\r\n      if (v.selected) {\r\n        return v.data;\r\n      }\r\n    })];\r\n    return rows.map(v => v.data);\r\n  }\r\n\r\n  childRowSelectionChanged(data: TreeTableRow[]) {\r\n    if (this.rowSelectionChanged !== undefined && this.rowSelectionChanged !== null) {\r\n      this.rowSelectionChanged.emit(data);\r\n    }\r\n  }\r\n\r\n  updateHost() {\r\n    if (this.rowSelectionChanged !== undefined && this.rowSelectionChanged !== null) {\r\n      this.rowSelectionChanged.emit(this.getSelectedRows());\r\n    }\r\n  }\r\n\r\n  inputRowSelectChangedInternal(event: any, rowData: any, headerKey: string, value: any, level: number) {\r\n    this.inputRowSelectChanged.emit({ event, rowData, headerKey, value, level });\r\n  }\r\n\r\n  inputRowTextChangedInternal(event: any, rowData: any, headerKey: string, value: any, level: number) {\r\n    this.inputRowTextChanged.emit({ event, rowData, headerKey, value, level });\r\n  }\r\n\r\n  inputRowSelectChangedChild(data: { event: any, rowData: any, headerKey: string, value: any, level: number }) {\r\n    this.inputRowSelectChanged.emit(data);\r\n  }\r\n\r\n  inputRowTextChangedChild(data: { event: any, rowData: any, headerKey: string, value: any, level: number }) {\r\n    this.inputRowTextChanged.emit(data);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AngularTreeTableComponent } from './angular-tree-table.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [AngularTreeTableComponent],\r\n  imports: [\r\n    FormsModule,\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    AngularTreeTableComponent\r\n  ]\r\n})\r\nexport class AngularTreeTableModule { }\r\n","import { TtDataType } from './tt-data-type';\r\n\r\nexport class TreeTableHeaderObject {\r\n    dataProperty: string;\r\n    title: string;\r\n    style: string;\r\n    show: boolean;\r\n    dataType: TtDataType = TtDataType.TEXT;\r\n    enableColumnSearch = true; //It will take effect when column search is enabled in data\r\n    constructor(title: string, dataProperty: string, style: string, show: boolean) {\r\n        this.dataProperty = dataProperty;\r\n        this.title = title;\r\n        this.style = style;\r\n        this.show = show;\r\n    }\r\n}\r\n","import { TreeTableRowActionType } from './tree-table-row-action-type';\r\n\r\nexport class TreeTableRowAction {\r\n    label: string;\r\n    title: string;\r\n    classes: string;\r\n    action: (rowData: any, rowAction: TreeTableRowAction) => void;\r\n    type: TreeTableRowActionType = TreeTableRowActionType.BUTTON;\r\n    reference: any;\r\n    context: any;\r\n\r\n    constructor(label: string, title: string, classes: string, action: (rowData: any, rowAction: TreeTableRowAction) => void) {\r\n        this.label = label;\r\n        this.title = title;\r\n        this.classes = classes;\r\n        this.action = action;\r\n    }\r\n}\r\n"]}